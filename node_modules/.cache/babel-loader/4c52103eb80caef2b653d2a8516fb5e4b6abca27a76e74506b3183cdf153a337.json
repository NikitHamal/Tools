{"ast":null,"code":"var _jsxFileName = \"D:\\\\Repositories\\\\Tools\\\\src\\\\components\\\\Transcript.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { Box, Typography, Paper, Tooltip, IconButton } from '@mui/material';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Transcript({\n  transcript,\n  currentTime\n}) {\n  _s();\n  const containerRef = useRef(null);\n  const activeLineRef = useRef(null);\n\n  // Find the current caption based on video time\n  const currentCaption = transcript.find((item, index) => currentTime >= item.start && (index === transcript.length - 1 || currentTime < transcript[index + 1].start));\n  useEffect(() => {\n    if (activeLineRef.current && containerRef.current) {\n      // Scroll to the active line with smooth animation\n      activeLineRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n    }\n  }, [currentCaption]);\n  const copyTranscriptToClipboard = () => {\n    const fullText = transcript.map(item => item.text).join(' ');\n    navigator.clipboard.writeText(fullText).then(() => {\n      // Could show a toast notification here\n      console.log('Transcript copied to clipboard');\n    }).catch(err => {\n      console.error('Failed to copy transcript:', err);\n    });\n  };\n  if (!transcript || transcript.length === 0) {\n    return /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      color: \"text.secondary\",\n      children: \"Loading transcript or no captions available...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 3,\n    sx: {\n      p: 2,\n      maxHeight: '300px',\n      overflow: 'auto',\n      backgroundColor: '#ffffff',\n      position: 'relative'\n    },\n    ref: containerRef,\n    className: \"transcript-container\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        mb: 2,\n        borderBottom: '1px solid #eee',\n        pb: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        className: \"transcript-title\",\n        children: \"Transcript\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n        title: \"Copy full transcript\",\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: copyTranscriptToClipboard,\n          size: \"small\",\n          \"aria-label\": \"Copy transcript\",\n          children: /*#__PURE__*/_jsxDEV(ContentCopyIcon, {\n            fontSize: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), transcript.map((line, index) => {\n      const isActive = currentCaption && currentCaption.start === line.start;\n      return /*#__PURE__*/_jsxDEV(Box, {\n        ref: isActive ? activeLineRef : null,\n        sx: {\n          p: 1,\n          my: 0.5,\n          borderRadius: 1,\n          backgroundColor: isActive ? 'rgba(63, 81, 181, 0.15)' : 'transparent',\n          transition: 'all 0.3s ease',\n          cursor: 'pointer',\n          '&:hover': {\n            backgroundColor: isActive ? 'rgba(63, 81, 181, 0.2)' : 'rgba(0, 0, 0, 0.04)'\n          }\n        },\n        className: `transcript-line ${isActive ? 'active-line' : ''}`,\n        onClick: () => {\n          // When a line is clicked, jump to that timestamp in the video\n          const player = document.getElementById('youtube-player');\n          if (player && player.contentWindow) {\n            // Using YouTube iframe API to seek to time\n            player.contentWindow.postMessage(JSON.stringify({\n              event: 'command',\n              func: 'seekTo',\n              args: [line.start, true]\n            }), '*');\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          sx: {\n            fontWeight: isActive ? 600 : 400,\n            color: isActive ? '#3f51b5' : 'inherit'\n          },\n          className: `transcript-text ${isActive ? 'active-text' : ''}`,\n          children: line.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          color: \"text.secondary\",\n          className: \"transcript-time\",\n          children: formatTime(line.start)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n// Helper function to format time\n_s(Transcript, \"VjgCCbmTy8Gcw54sarrPOX1bFR8=\");\n_c = Transcript;\nfunction formatTime(seconds) {\n  const mins = Math.floor(seconds / 60);\n  const secs = Math.floor(seconds % 60);\n  return `${mins}:${secs.toString().padStart(2, '0')}`;\n}\nexport default Transcript;\nvar _c;\n$RefreshReg$(_c, \"Transcript\");","map":{"version":3,"names":["React","useRef","useEffect","Box","Typography","Paper","Tooltip","IconButton","ContentCopyIcon","jsxDEV","_jsxDEV","Transcript","transcript","currentTime","_s","containerRef","activeLineRef","currentCaption","find","item","index","start","length","current","scrollIntoView","behavior","block","copyTranscriptToClipboard","fullText","map","text","join","navigator","clipboard","writeText","then","console","log","catch","err","error","variant","color","children","fileName","_jsxFileName","lineNumber","columnNumber","elevation","sx","p","maxHeight","overflow","backgroundColor","position","ref","className","display","justifyContent","alignItems","mb","borderBottom","pb","title","onClick","size","fontSize","line","isActive","my","borderRadius","transition","cursor","player","document","getElementById","contentWindow","postMessage","JSON","stringify","event","func","args","fontWeight","formatTime","_c","seconds","mins","Math","floor","secs","toString","padStart","$RefreshReg$"],"sources":["D:/Repositories/Tools/src/components/Transcript.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport { Box, Typography, Paper, Tooltip, IconButton } from '@mui/material';\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\n\r\nfunction Transcript({ transcript, currentTime }) {\r\n  const containerRef = useRef(null);\r\n  const activeLineRef = useRef(null);\r\n\r\n  // Find the current caption based on video time\r\n  const currentCaption = transcript.find(\r\n    (item, index) => \r\n      currentTime >= item.start && \r\n      (index === transcript.length - 1 || currentTime < transcript[index + 1].start)\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (activeLineRef.current && containerRef.current) {\r\n      // Scroll to the active line with smooth animation\r\n      activeLineRef.current.scrollIntoView({\r\n        behavior: 'smooth',\r\n        block: 'center',\r\n      });\r\n    }\r\n  }, [currentCaption]);\r\n\r\n  const copyTranscriptToClipboard = () => {\r\n    const fullText = transcript.map(item => item.text).join(' ');\r\n    navigator.clipboard.writeText(fullText)\r\n      .then(() => {\r\n        // Could show a toast notification here\r\n        console.log('Transcript copied to clipboard');\r\n      })\r\n      .catch(err => {\r\n        console.error('Failed to copy transcript:', err);\r\n      });\r\n  };\r\n\r\n  if (!transcript || transcript.length === 0) {\r\n    return (\r\n      <Typography variant=\"body1\" color=\"text.secondary\">\r\n        Loading transcript or no captions available...\r\n      </Typography>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Paper \r\n      elevation={3}\r\n      sx={{\r\n        p: 2,\r\n        maxHeight: '300px',\r\n        overflow: 'auto',\r\n        backgroundColor: '#ffffff',\r\n        position: 'relative',\r\n      }}\r\n      ref={containerRef}\r\n      className=\"transcript-container\"\r\n    >\r\n      <Box sx={{ \r\n        display: 'flex', \r\n        justifyContent: 'space-between', \r\n        alignItems: 'center',\r\n        mb: 2,\r\n        borderBottom: '1px solid #eee',\r\n        pb: 1 \r\n      }}>\r\n        <Typography variant=\"h6\" className=\"transcript-title\">\r\n          Transcript\r\n        </Typography>\r\n        <Tooltip title=\"Copy full transcript\">\r\n          <IconButton \r\n            onClick={copyTranscriptToClipboard}\r\n            size=\"small\"\r\n            aria-label=\"Copy transcript\"\r\n          >\r\n            <ContentCopyIcon fontSize=\"small\" />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </Box>\r\n      \r\n      {transcript.map((line, index) => {\r\n        const isActive = currentCaption && currentCaption.start === line.start;\r\n        \r\n        return (\r\n          <Box \r\n            key={index}\r\n            ref={isActive ? activeLineRef : null}\r\n            sx={{\r\n              p: 1,\r\n              my: 0.5,\r\n              borderRadius: 1,\r\n              backgroundColor: isActive ? 'rgba(63, 81, 181, 0.15)' : 'transparent',\r\n              transition: 'all 0.3s ease',\r\n              cursor: 'pointer',\r\n              '&:hover': {\r\n                backgroundColor: isActive ? 'rgba(63, 81, 181, 0.2)' : 'rgba(0, 0, 0, 0.04)',\r\n              },\r\n            }}\r\n            className={`transcript-line ${isActive ? 'active-line' : ''}`}\r\n            onClick={() => {\r\n              // When a line is clicked, jump to that timestamp in the video\r\n              const player = document.getElementById('youtube-player');\r\n              if (player && player.contentWindow) {\r\n                // Using YouTube iframe API to seek to time\r\n                player.contentWindow.postMessage(\r\n                  JSON.stringify({\r\n                    event: 'command',\r\n                    func: 'seekTo',\r\n                    args: [line.start, true]\r\n                  }), \r\n                  '*'\r\n                );\r\n              }\r\n            }}\r\n          >\r\n            <Typography \r\n              variant=\"body1\"\r\n              sx={{\r\n                fontWeight: isActive ? 600 : 400,\r\n                color: isActive ? '#3f51b5' : 'inherit',\r\n              }}\r\n              className={`transcript-text ${isActive ? 'active-text' : ''}`}\r\n            >\r\n              {line.text}\r\n            </Typography>\r\n            <Typography \r\n              variant=\"caption\" \r\n              color=\"text.secondary\"\r\n              className=\"transcript-time\"\r\n            >\r\n              {formatTime(line.start)}\r\n            </Typography>\r\n          </Box>\r\n        );\r\n      })}\r\n    </Paper>\r\n  );\r\n}\r\n\r\n// Helper function to format time\r\nfunction formatTime(seconds) {\r\n  const mins = Math.floor(seconds / 60);\r\n  const secs = Math.floor(seconds % 60);\r\n  return `${mins}:${secs.toString().padStart(2, '0')}`;\r\n}\r\n\r\nexport default Transcript; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}