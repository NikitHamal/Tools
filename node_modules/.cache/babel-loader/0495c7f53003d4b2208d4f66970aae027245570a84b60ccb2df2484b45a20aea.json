{"ast":null,"code":"var _jsxFileName = \"D:\\\\Repositories\\\\Tools\\\\src\\\\components\\\\Transcript.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport { Box, Typography, Paper, Tooltip, IconButton, Chip } from '@mui/material';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport AutoFixHighIcon from '@mui/icons-material/AutoFixHigh';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Transcript({\n  transcript,\n  currentTime\n}) {\n  _s();\n  const containerRef = useRef(null);\n  const activeLineRef = useRef(null);\n  const [showingAlternatives, setShowingAlternatives] = useState({});\n\n  // Find the current caption based on video time\n  const currentCaption = transcript.find((item, index) => currentTime >= item.start && (index === transcript.length - 1 || currentTime < transcript[index + 1].start));\n  useEffect(() => {\n    if (activeLineRef.current && containerRef.current) {\n      // Scroll to the active line with smooth animation\n      activeLineRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n    }\n  }, [currentCaption]);\n  const copyTranscriptToClipboard = () => {\n    const fullText = transcript.map(item => item.text).join(' ');\n    navigator.clipboard.writeText(fullText).then(() => {\n      // Could show a toast notification here\n      console.log('Transcript copied to clipboard');\n    }).catch(err => {\n      console.error('Failed to copy transcript:', err);\n    });\n  };\n  const toggleAlternative = index => {\n    setShowingAlternatives(prev => ({\n      ...prev,\n      [index]: !prev[index]\n    }));\n  };\n\n  // Check if any transcript items have alternative texts\n  const hasAlternatives = transcript.some(item => item.alternativeText);\n  if (!transcript || transcript.length === 0) {\n    return /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      color: \"text.secondary\",\n      children: \"Loading transcript or no captions available...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 3,\n    sx: {\n      p: 2,\n      maxHeight: '300px',\n      overflow: 'auto',\n      backgroundColor: '#ffffff',\n      position: 'relative'\n    },\n    ref: containerRef,\n    className: \"transcript-container\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        mb: 2,\n        borderBottom: '1px solid #eee',\n        pb: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          className: \"transcript-title\",\n          children: \"Transcript\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), hasAlternatives && /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: \"This transcript has AI-enhanced accuracy\",\n          children: /*#__PURE__*/_jsxDEV(Chip, {\n            icon: /*#__PURE__*/_jsxDEV(AutoFixHighIcon, {\n              fontSize: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 23\n            }, this),\n            label: \"AI Enhanced\",\n            size: \"small\",\n            color: \"primary\",\n            variant: \"outlined\",\n            sx: {\n              ml: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n        title: \"Copy full transcript\",\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: copyTranscriptToClipboard,\n          size: \"small\",\n          \"aria-label\": \"Copy transcript\",\n          children: /*#__PURE__*/_jsxDEV(ContentCopyIcon, {\n            fontSize: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), transcript.map((line, index) => {\n      const isActive = currentCaption && currentCaption.start === line.start;\n      const hasAlternative = !!line.alternativeText;\n      const showing = showingAlternatives[index];\n      return /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          ref: isActive ? activeLineRef : null,\n          sx: {\n            p: 1,\n            my: 0.5,\n            borderRadius: 1,\n            backgroundColor: isActive ? 'rgba(63, 81, 181, 0.15)' : 'transparent',\n            transition: 'all 0.3s ease',\n            cursor: 'pointer',\n            position: 'relative',\n            '&:hover': {\n              backgroundColor: isActive ? 'rgba(63, 81, 181, 0.2)' : 'rgba(0, 0, 0, 0.04)'\n            }\n          },\n          className: `transcript-line ${isActive ? 'active-line' : ''}`,\n          onClick: () => {\n            // When a line is clicked, jump to that timestamp in the video\n            const player = document.getElementById('youtube-player');\n            if (player && player.contentWindow) {\n              // Using YouTube iframe API to seek to time\n              player.contentWindow.postMessage(JSON.stringify({\n                event: 'command',\n                func: 'seekTo',\n                args: [line.start, true]\n              }), '*');\n            }\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            sx: {\n              fontWeight: isActive ? 600 : 400,\n              color: isActive ? '#3f51b5' : 'inherit'\n            },\n            className: `transcript-text ${isActive ? 'active-text' : ''}`,\n            children: line.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              mt: 0.5\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              color: \"text.secondary\",\n              className: \"transcript-time\",\n              children: formatTime(line.start)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 17\n            }, this), hasAlternative && /*#__PURE__*/_jsxDEV(Tooltip, {\n              title: showing ? \"Hide alternative\" : \"Show alternative transcription\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                size: \"small\",\n                onClick: e => {\n                  e.stopPropagation();\n                  toggleAlternative(index);\n                },\n                sx: {\n                  p: 0.5,\n                  color: showing ? 'primary.main' : 'text.secondary',\n                  '&:hover': {\n                    backgroundColor: 'rgba(0, 0, 0, 0.04)'\n                  }\n                },\n                children: /*#__PURE__*/_jsxDEV(AutoFixHighIcon, {\n                  fontSize: \"small\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this), hasAlternative && showing && /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            pl: 2,\n            pr: 1,\n            py: 1,\n            my: 0.5,\n            borderLeft: '2px solid #3f51b5',\n            backgroundColor: 'rgba(63, 81, 181, 0.05)',\n            borderRadius: '0 4px 4px 0',\n            fontSize: '0.95em'\n          },\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            sx: {\n              fontStyle: 'italic'\n            },\n            children: [\"Alternative: \", line.alternativeText]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n// Helper function to format time\n_s(Transcript, \"O+7lUGVWfjyFIOhtXrUzzxgiTfY=\");\n_c = Transcript;\nfunction formatTime(seconds) {\n  const mins = Math.floor(seconds / 60);\n  const secs = Math.floor(seconds % 60);\n  return `${mins}:${secs.toString().padStart(2, '0')}`;\n}\nexport default Transcript;\nvar _c;\n$RefreshReg$(_c, \"Transcript\");","map":{"version":3,"names":["React","useRef","useEffect","useState","Box","Typography","Paper","Tooltip","IconButton","Chip","ContentCopyIcon","AutoFixHighIcon","jsxDEV","_jsxDEV","Transcript","transcript","currentTime","_s","containerRef","activeLineRef","showingAlternatives","setShowingAlternatives","currentCaption","find","item","index","start","length","current","scrollIntoView","behavior","block","copyTranscriptToClipboard","fullText","map","text","join","navigator","clipboard","writeText","then","console","log","catch","err","error","toggleAlternative","prev","hasAlternatives","some","alternativeText","variant","color","children","fileName","_jsxFileName","lineNumber","columnNumber","elevation","sx","p","maxHeight","overflow","backgroundColor","position","ref","className","display","justifyContent","alignItems","mb","borderBottom","pb","title","icon","fontSize","label","size","ml","onClick","line","isActive","hasAlternative","showing","my","borderRadius","transition","cursor","player","document","getElementById","contentWindow","postMessage","JSON","stringify","event","func","args","fontWeight","mt","formatTime","e","stopPropagation","pl","pr","py","borderLeft","fontStyle","_c","seconds","mins","Math","floor","secs","toString","padStart","$RefreshReg$"],"sources":["D:/Repositories/Tools/src/components/Transcript.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport { Box, Typography, Paper, Tooltip, IconButton, Chip } from '@mui/material';\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\nimport AutoFixHighIcon from '@mui/icons-material/AutoFixHigh';\r\n\r\nfunction Transcript({ transcript, currentTime }) {\r\n  const containerRef = useRef(null);\r\n  const activeLineRef = useRef(null);\r\n  const [showingAlternatives, setShowingAlternatives] = useState({});\r\n\r\n  // Find the current caption based on video time\r\n  const currentCaption = transcript.find(\r\n    (item, index) => \r\n      currentTime >= item.start && \r\n      (index === transcript.length - 1 || currentTime < transcript[index + 1].start)\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (activeLineRef.current && containerRef.current) {\r\n      // Scroll to the active line with smooth animation\r\n      activeLineRef.current.scrollIntoView({\r\n        behavior: 'smooth',\r\n        block: 'center',\r\n      });\r\n    }\r\n  }, [currentCaption]);\r\n\r\n  const copyTranscriptToClipboard = () => {\r\n    const fullText = transcript.map(item => item.text).join(' ');\r\n    navigator.clipboard.writeText(fullText)\r\n      .then(() => {\r\n        // Could show a toast notification here\r\n        console.log('Transcript copied to clipboard');\r\n      })\r\n      .catch(err => {\r\n        console.error('Failed to copy transcript:', err);\r\n      });\r\n  };\r\n\r\n  const toggleAlternative = (index) => {\r\n    setShowingAlternatives(prev => ({\r\n      ...prev,\r\n      [index]: !prev[index]\r\n    }));\r\n  };\r\n\r\n  // Check if any transcript items have alternative texts\r\n  const hasAlternatives = transcript.some(item => item.alternativeText);\r\n\r\n  if (!transcript || transcript.length === 0) {\r\n    return (\r\n      <Typography variant=\"body1\" color=\"text.secondary\">\r\n        Loading transcript or no captions available...\r\n      </Typography>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Paper \r\n      elevation={3}\r\n      sx={{\r\n        p: 2,\r\n        maxHeight: '300px',\r\n        overflow: 'auto',\r\n        backgroundColor: '#ffffff',\r\n        position: 'relative',\r\n      }}\r\n      ref={containerRef}\r\n      className=\"transcript-container\"\r\n    >\r\n      <Box sx={{ \r\n        display: 'flex', \r\n        justifyContent: 'space-between', \r\n        alignItems: 'center',\r\n        mb: 2,\r\n        borderBottom: '1px solid #eee',\r\n        pb: 1 \r\n      }}>\r\n        <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n          <Typography variant=\"h6\" className=\"transcript-title\">\r\n            Transcript\r\n          </Typography>\r\n          {hasAlternatives && (\r\n            <Tooltip title=\"This transcript has AI-enhanced accuracy\">\r\n              <Chip \r\n                icon={<AutoFixHighIcon fontSize=\"small\" />} \r\n                label=\"AI Enhanced\" \r\n                size=\"small\" \r\n                color=\"primary\"\r\n                variant=\"outlined\"\r\n                sx={{ ml: 1 }}\r\n              />\r\n            </Tooltip>\r\n          )}\r\n        </Box>\r\n        <Tooltip title=\"Copy full transcript\">\r\n          <IconButton \r\n            onClick={copyTranscriptToClipboard}\r\n            size=\"small\"\r\n            aria-label=\"Copy transcript\"\r\n          >\r\n            <ContentCopyIcon fontSize=\"small\" />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </Box>\r\n      \r\n      {transcript.map((line, index) => {\r\n        const isActive = currentCaption && currentCaption.start === line.start;\r\n        const hasAlternative = !!line.alternativeText;\r\n        const showing = showingAlternatives[index];\r\n        \r\n        return (\r\n          <Box key={index}>\r\n            <Box \r\n              ref={isActive ? activeLineRef : null}\r\n              sx={{\r\n                p: 1,\r\n                my: 0.5,\r\n                borderRadius: 1,\r\n                backgroundColor: isActive ? 'rgba(63, 81, 181, 0.15)' : 'transparent',\r\n                transition: 'all 0.3s ease',\r\n                cursor: 'pointer',\r\n                position: 'relative',\r\n                '&:hover': {\r\n                  backgroundColor: isActive ? 'rgba(63, 81, 181, 0.2)' : 'rgba(0, 0, 0, 0.04)',\r\n                },\r\n              }}\r\n              className={`transcript-line ${isActive ? 'active-line' : ''}`}\r\n              onClick={() => {\r\n                // When a line is clicked, jump to that timestamp in the video\r\n                const player = document.getElementById('youtube-player');\r\n                if (player && player.contentWindow) {\r\n                  // Using YouTube iframe API to seek to time\r\n                  player.contentWindow.postMessage(\r\n                    JSON.stringify({\r\n                      event: 'command',\r\n                      func: 'seekTo',\r\n                      args: [line.start, true]\r\n                    }), \r\n                    '*'\r\n                  );\r\n                }\r\n              }}\r\n            >\r\n              <Typography \r\n                variant=\"body1\"\r\n                sx={{\r\n                  fontWeight: isActive ? 600 : 400,\r\n                  color: isActive ? '#3f51b5' : 'inherit',\r\n                }}\r\n                className={`transcript-text ${isActive ? 'active-text' : ''}`}\r\n              >\r\n                {line.text}\r\n              </Typography>\r\n              \r\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 0.5 }}>\r\n                <Typography \r\n                  variant=\"caption\" \r\n                  color=\"text.secondary\"\r\n                  className=\"transcript-time\"\r\n                >\r\n                  {formatTime(line.start)}\r\n                </Typography>\r\n                \r\n                {hasAlternative && (\r\n                  <Tooltip title={showing ? \"Hide alternative\" : \"Show alternative transcription\"}>\r\n                    <IconButton \r\n                      size=\"small\" \r\n                      onClick={(e) => {\r\n                        e.stopPropagation();\r\n                        toggleAlternative(index);\r\n                      }}\r\n                      sx={{ \r\n                        p: 0.5, \r\n                        color: showing ? 'primary.main' : 'text.secondary',\r\n                        '&:hover': {\r\n                          backgroundColor: 'rgba(0, 0, 0, 0.04)',\r\n                        },\r\n                      }}\r\n                    >\r\n                      <AutoFixHighIcon fontSize=\"small\" />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                )}\r\n              </Box>\r\n            </Box>\r\n            \r\n            {hasAlternative && showing && (\r\n              <Box\r\n                sx={{\r\n                  pl: 2,\r\n                  pr: 1,\r\n                  py: 1,\r\n                  my: 0.5,\r\n                  borderLeft: '2px solid #3f51b5',\r\n                  backgroundColor: 'rgba(63, 81, 181, 0.05)',\r\n                  borderRadius: '0 4px 4px 0',\r\n                  fontSize: '0.95em',\r\n                }}\r\n              >\r\n                <Typography variant=\"body2\" sx={{ fontStyle: 'italic' }}>\r\n                  Alternative: {line.alternativeText}\r\n                </Typography>\r\n              </Box>\r\n            )}\r\n          </Box>\r\n        );\r\n      })}\r\n    </Paper>\r\n  );\r\n}\r\n\r\n// Helper function to format time\r\nfunction formatTime(seconds) {\r\n  const mins = Math.floor(seconds / 60);\r\n  const secs = Math.floor(seconds % 60);\r\n  return `${mins}:${secs.toString().padStart(2, '0')}`;\r\n}\r\n\r\nexport default Transcript; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}